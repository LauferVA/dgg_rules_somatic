% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/main.R
\name{generate_tier_tsv}
\alias{generate_tier_tsv}
\title{Function that annotates CNV segment files}
\usage{
generate_tier_tsv(variant_set, config, annotation_tags, sample_name = "test")
}
\arguments{
\item{variant_set}{List with tiered variants}

\item{config}{PCGR configuration settings}

\item{annotation_tags}{List with display columns}

\item{sample_name}{Sample identifier}
}
\value{
tsv_variants data frame with tier-annotated list of
variants for tab-separated output
}
\description{
param cna_segments_tsv CNV file name with chromosomal log(2)-ratio segments
param pcgr_data object with PCGR annotation data
param sample_name sample identifier
param pcgr_config Object with PCGR configuration parameters
param oncotree Data frame with phenotype terms relevant for tumor type
param transcript_overlap_pct required aberration overlap fraction
(percent) for reported transcripts (default 100 percent)
}
\details{
export
generate_report_data_cna <-
function(cna_segments_tsv,
pcgr_data,
sample_name,
pcgr_config,
oncotree,
transcript_overlap_pct = 100) {

\if{html}{\out{<div class="sourceCode">}}\preformatted{invisible(
  assertthat::assert_that(
    file.exists(cna_segments_tsv),
    msg = paste0("File 'cna_segments_tsv' (",
                 cna_segments_tsv, ") does not exist")))
pcg_report_cna <- pcgrr::init_report(config = pcgr_config,
                                     class = "cna")
log_r_homdel <- pcgr_config[["cna"]][["log_r_homdel"]]
log_r_gain <- pcgr_config[["cna"]][["log_r_gain"]]
tumor_type <- pcgr_config[["t_props"]][["tumor_type"]]
MEGABASE <- 1000000

pcgrr::log4r_info("------")
pcgrr::log4r_info(paste0("Generating report data for copy number segment file ",
                  cna_segments_tsv))

## READ INPUT FILE, VALIDATE INPUT CHROMOSOMES AND SEGMENTS, ADD CYTOBAND INFO
cna_df <- utils::read.table(file = cna_segments_tsv, header = T,
                     stringsAsFactors = F, sep = "\\t",
                     comment.char = "", quote = "") |>
  dplyr::rename(chromosome = Chromosome,
                LogR = Segment_Mean,
                segment_start = Start,
                segment_end = End) |>
  dplyr::distinct() |>
  dplyr::select(
    c("chromosome","LogR",
      "segment_start","segment_end")) |>
  dplyr::mutate(
    chromosome = stringr::str_replace(
      .data$chromosome, "^chr", "")) |>
  pcgrr::get_valid_chromosomes(
    chromosome_column = "chromosome",
    bsg = pcgr_data[["assembly"]][["bsg"]]) |>
  pcgrr::get_valid_chromosome_segments(
    genome_assembly = pcgr_data[["assembly"]][["grch_name"]],
    bsg = pcgr_data[["assembly"]][["bsg"]]) |>
  dplyr::filter(!is.na(.data$LogR)) |>
  dplyr::mutate(LogR = round(as.numeric(.data$LogR), digits = 3)) |>
  dplyr::mutate(SEGMENT_ID = paste0(.data$chromosome, ":",
                                    .data$segment_start, "-",
                                    .data$segment_end)) |>
  pcgrr::get_cna_cytoband(pcgr_data = pcgr_data) |>
  dplyr::mutate(SAMPLE_ID = sample_name) |>
  pcgrr::append_ucsc_segment_link(
    hgname = pcgr_data[["assembly"]][["hg_name"]],
    chrom = "chromosome",
    start = "segment_start",
    end = "segment_end") |>
  dplyr::mutate(
    SEGMENT_LENGTH_MB =
      round((as.numeric((.data$segment_end - .data$segment_start) /
                          MEGABASE)),
            digits = 5)) |>
  dplyr::rename(SEGMENT = .data$SEGMENT_LINK, LOG_R = .data$LogR)

## MAKE SIMPLE SEGMENTS DATA FRAME FOR FILTERING IN REPORT
cna_segments <- cna_df |>
  dplyr::select(.data$SEGMENT,
                .data$SEGMENT_LENGTH_MB,
                .data$CYTOBAND,
                .data$LOG_R,
                .data$EVENT_TYPE) |>
  dplyr::distinct()

#### FIND AND APPEND GENCODE TRANSCRIPTS THAT OVERLAP
cna_transcript_df <-
  pcgrr::get_cna_overlapping_transcripts(
     cna_df, pcgr_data = pcgr_data)
#get_cna_overlapping_transcripts(
#  cna_df, pcgr_data = pcgr_data)

#### GENERATE DATAFRAME OF UNIQUE TRANSCRIPT-CNA SEGMENTS FOR OUTPUT TSV
cna_transcript_df_print <- cna_transcript_df |>
  dplyr::select(.data$chrom,
                .data$segment_start,
                .data$segment_end,
                .data$SEGMENT_ID,
                .data$SEGMENT_LENGTH_MB,
                .data$EVENT_TYPE,
                .data$CYTOBAND,
                .data$LOG_R,
                .data$SAMPLE_ID,
                .data$ensembl_gene_id,
                .data$symbol,
                .data$ensembl_transcript_id,
                .data$transcript_start,
                .data$transcript_end,
                .data$transcript_overlap_percent,
                .data$name,
                .data$biotype,
                .data$tumor_suppressor,
                .data$oncogene,
                .data$intogen_driver,
                .data$chembl_compound_id,
                .data$gencode_tag,
                .data$gencode_release) |>
  magrittr::set_colnames(tolower(names(.)))

avg_transcript_overlap <- as.data.frame(
  cna_transcript_df |>
    dplyr::filter(.data$biotype == "protein_coding") |>
    dplyr::group_by(.data$SEGMENT_ID, .data$symbol) |>
    dplyr::summarise(
      MEAN_TRANSCRIPT_CNA_OVERLAP = mean(
        .data$transcript_overlap_percent),
      TRANSCRIPTS = paste0(.data$ensembl_transcript_id, collapse = ", "),
      .groups = "drop") |>
    dplyr::rename(SYMBOL = .data$symbol) |>
    dplyr::mutate(
      MEAN_TRANSCRIPT_CNA_OVERLAP =
        round(.data$MEAN_TRANSCRIPT_CNA_OVERLAP, digits = 2))
)

cna_transcript_df <-
  dplyr::select(cna_transcript_df, -.data$ensembl_transcript_id) |>
  dplyr::filter(.data$biotype == "protein_coding") |>
  dplyr::distinct() |>
  dplyr::mutate(VAR_ID = as.character(rep(1:nrow(.)))) |>
  magrittr::set_colnames(toupper(names(.))) |>
  pcgrr::append_otargets_pheno_link(
    pcgr_data = pcgr_data,
    oncotree = oncotree) |>
  dplyr::rename(OPENTARGETS_ASSOCIATIONS =
                  .data$OT_DISEASE_LINK) |>
  dplyr::select(.data$VAR_ID,
                .data$SEGMENT_ID,
                .data$SYMBOL,
                .data$ONCOGENE,
                .data$ONCOGENE_EVIDENCE,
                .data$TUMOR_SUPPRESSOR,
                .data$TUMOR_SUPPRESSOR_EVIDENCE,
                .data$CANCERGENE_SUPPORT,
                .data$OPENTARGETS_ASSOCIATIONS,
                .data$OPENTARGETS_RANK,
                .data$ENTREZ_ID,
                .data$CHROM,
                .data$NAME,
                .data$EVENT_TYPE,
                .data$SEGMENT_LENGTH_MB,
                .data$SEGMENT,
                .data$TRANSCRIPT_OVERLAP_PERCENT,
                .data$LOG_R) |>
  dplyr::mutate(ENTREZ_ID = as.character(.data$ENTREZ_ID)) |>
  dplyr::rename(GENENAME = .data$NAME,
                TRANSCRIPT_OVERLAP = .data$TRANSCRIPT_OVERLAP_PERCENT,
                CHROMOSOME = .data$CHROM) |>
  dplyr::left_join(pcgr_data[["kegg"]][["pathway_links"]],
                   by = c("ENTREZ_ID" = "gene_id")) |>
  dplyr::rename(KEGG_PATHWAY = .data$kegg_pathway_urls)

## Get gene annotation links
entrezgene_annotation_links <-
  pcgrr::generate_annotation_link(
    cna_transcript_df,
    vardb = "GENE_NAME",
    group_by_var = "VAR_ID",
    link_key_var = "ENTREZ_ID",
    link_display_var = "GENENAME",
    url_prefix = "http://www.ncbi.nlm.nih.gov/gene/")

cna_transcript_df <- cna_transcript_df |>
  dplyr::left_join(
    dplyr::rename(entrezgene_annotation_links,
                  GENE_NAME = .data$link),
    by = c("VAR_ID")) |>
  dplyr::select(.data$SEGMENT_ID,
                .data$CHROMOSOME,
                .data$SYMBOL,
                .data$GENE_NAME,
                .data$KEGG_PATHWAY,
                .data$TUMOR_SUPPRESSOR,
                .data$TUMOR_SUPPRESSOR_EVIDENCE,
                .data$ONCOGENE,
                .data$ONCOGENE_EVIDENCE,
                .data$CANCERGENE_SUPPORT,
                .data$OPENTARGETS_ASSOCIATIONS,
                .data$OPENTARGETS_RANK,
                .data$SEGMENT_LENGTH_MB,
                .data$SEGMENT,
                .data$EVENT_TYPE,
                .data$LOG_R) |>
  dplyr::distinct() |>
  dplyr::left_join(avg_transcript_overlap,
                   by = c("SEGMENT_ID", "SYMBOL"))


n_cna_loss <-
  dplyr::filter(cna_segments, .data$LOG_R <= log_r_homdel) |>
  nrow()
n_cna_gain <-
  dplyr::filter(cna_segments, .data$LOG_R >= log_r_gain) |>
  nrow()
cna_segments_filtered <- cna_segments |>
  dplyr::filter(.data$LOG_R >= log_r_gain | .data$LOG_R <= log_r_homdel) |>
  dplyr::arrange(dplyr::desc(.data$LOG_R))
pcgrr::log4r_info(
  paste0("Detected ", nrow(cna_segments_filtered),
         " segments subject to amplification/deletion (",
         n_cna_loss, " deletions, ", n_cna_gain,
         " gains according to user-defined log(2) ratio thresholds)"))


## Get aberration sets related to tumor suppressor genes
## /oncogenes/drug targets
onco_ts_sets <-
  get_oncogene_tsgene_target_sets(
    cna_transcript_df,
    transcript_overlap_pct = transcript_overlap_pct,
    log_r_homdel = log_r_homdel,
    log_r_gain = log_r_gain,
    tumor_type = tumor_type,
    pcgr_data = pcgr_data)

## load all clinical evidence items ()
eitems_any_tt <- pcgrr::load_eitems(
  eitems_raw = pcgr_data$biomarkers,
  alteration_types = "CNA",
  ontology =
    pcgr_data$phenotype$oncotree,
  origin = "Somatic",
  tumor_type_specificity = "any")



## Get all clinical evidence items that are related to
## tumor suppressor genes/oncogenes/drug targets (NOT tumor-type specific)
biomarker_hits_cna_any <-
  pcgrr::get_clin_assocs_cna(
    onco_ts_sets,
    annotation_tags = pcgr_data$annotation_tags,
    eitems = eitems_any_tt)

pcg_report_cna[["clin_eitem"]][["any_ttype"]] <-
  biomarker_hits_cna_any[["clin_eitem"]]
pcg_report_cna[["variant_set"]][["tier2"]] <-
  biomarker_hits_cna_any$variant_set

## Get all clinical evidence items that
## overlap query set (if tumor type is specified)
if (tumor_type != "Cancer, NOS") \{

  ## load tumor-type specific evidence items ()
  eitems_specific_tt <- pcgrr::load_eitems(
    eitems_raw = pcgr_data$biomarkers,
    alteration_types = "CNA",
    ontology =
      pcgr_data$phenotype$oncotree,
    origin = "Somatic",
    tumor_type_specificity = "specific",
    tumor_type = tumor_type)

  biomarker_hits_cna_specific <-
    pcgrr::get_clin_assocs_cna(
      onco_ts_sets,
      annotation_tags = pcgr_data$annotation_tags,
      eitems = eitems_specific_tt)

  ## Assign putative TIER 1 variant set
  pcg_report_cna[["clin_eitem"]][["specific_ttype"]] <-
    biomarker_hits_cna_specific$clin_eitem
  pcg_report_cna[["variant_set"]][["tier1"]] <-
    biomarker_hits_cna_specific$variant_set
\}

pcg_report_cna[["eval"]] <- T
pcg_report_cna[["variant_set"]][["tsv"]] <-
  cna_transcript_df_print
pcg_report_cna[["v_stat"]][["n_cna_gain"]] <-
  n_cna_gain
pcg_report_cna[["v_stat"]][["n_cna_loss"]] <-
  n_cna_loss
pcg_report_cna[["disp"]][["segment"]] <-
  cna_segments_filtered
pcg_report_cna[["disp"]][["oncogene_gain"]] <-
  onco_ts_sets[["oncogene_gain"]]
pcg_report_cna[["disp"]][["tsgene_loss"]] <-
  onco_ts_sets[["tsgene_loss"]]
pcg_report_cna[["disp"]][["other_target"]] <-
  onco_ts_sets[["other_target"]]


pcg_report_cna <-
  pcgrr::assign_tier1_tier2_acmg_cna(pcg_report_cna)

return(pcg_report_cna)
}\if{html}{\out{</div>}}

}

Function that annotates CNV segment files

param yaml_fname PCGR yaml file
param ref_data PCGR/CPSR reference data object

export
Function that generates dense and tiered annotated variant datasets
}
