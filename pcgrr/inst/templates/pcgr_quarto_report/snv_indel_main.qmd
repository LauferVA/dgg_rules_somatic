## Somatic SNVs/InDels

```{r prep_data}

consequence_stats <- 
  pcg_report$content$snv_indel$callset$variant_display |>
  dplyr::mutate(CONSEQUENCE = stringr::str_replace_all(
    CONSEQUENCE, "(, [0-9A-Za-z_]{1,}){1,}$",""
  )) |>
  dplyr::group_by(CONSEQUENCE) |>
  dplyr::summarise(
    n = dplyr::n(),
    .groups = "drop"
  ) |>
  dplyr::mutate(percent = n / sum(n) * 100) |>
  dplyr::mutate(CONSEQUENCE = dplyr::if_else(
    percent < 3, "other_consequence", 
    as.character(CONSEQUENCE)
  )) |>
  dplyr::group_by(CONSEQUENCE) |>
  dplyr::summarise(
    n = sum(n),
    percent = sum(percent),
    .groups = "drop"
  ) |>
  dplyr::arrange(dplyr::desc(n))

vartype_stats <- 
  pcg_report$content$snv_indel$callset$variant_display |>
  dplyr::group_by(VARIANT_CLASS) |>
  dplyr::summarise(
    n = dplyr::n(),
    .groups = "drop"
  ) |>
  dplyr::mutate(percent = n / sum(n) * 100) |>
  dplyr::arrange(dplyr::desc(percent))

coding_stats <- 
  pcg_report$content$snv_indel$callset$variant_display |>
  dplyr::group_by(CODING_STATUS) |>
  dplyr::summarise(
    n = dplyr::n(),
    .groups = "drop"
  ) |>
  dplyr::mutate(percent = n / sum(n) * 100) |>
  dplyr::arrange(dplyr::desc(percent))

t <- list(
  family = "Helvetica",
  size = 15)

varstats_plots_plotly <- list()
varstats_plots_plotly[['coding']] <- 
  plotly::plot_ly(
    coding_stats, 
    marker = list(colors = pcgrr::color_palette$tier$values,
                  line = list(color = '#FFFFFF', width = 3))) |>
  plotly::add_pie(coding_stats, labels =~ factor(CODING_STATUS),
                  values = ~n,
                  textinfo = "percent",
                  type = 'pie') |>
  plotly::layout(legend = list(orientation = "h", font = t)) 

varstats_plots_plotly[['consequence']] <- 
  plotly::plot_ly(
    consequence_stats, 
    marker = list(colors = pcgrr::color_palette$tier$values,
                  line = list(color = '#FFFFFF', width = 3))) |>
  plotly::add_pie(consequence_stats, labels =~ factor(CONSEQUENCE),
                  values = ~n,
                  textinfo = "percent",
                  type = 'pie') |>
  plotly::layout(legend = list(orientation = "h", font = t)) 

varstats_plots_plotly[['type']] <- 
  plotly::plot_ly(
    vartype_stats, 
    marker = list(colors = pcgrr::color_palette$tier$values,
                  line = list(color = '#FFFFFF', width = 3))) |>
  plotly::add_pie(vartype_stats, labels =~ factor(VARIANT_CLASS),
                  values = ~n,
                  textinfo = "percent",
                  type = 'pie') |>
  plotly::layout(legend = list(orientation = "h", font = t)) 



```

```{r prep_vboxes}
#| output: asis

statbox <- function(
    value = "A value", 
    title = "A title", 
    theme = "purple",
    height = "90px"){
  return(
    bslib::value_box(
      height = height,
      value = value,
      title = title,
      showcase = NULL,
      theme = theme
    )
  )
  
}

bslib::page_fillable(
  bslib::layout_columns(
    height = "350px",
    bslib::card(
      full_screen = TRUE,
      height = "350px",
      bslib::card_header(
        class = "bg-dark", 
        paste0("Variant statistics | coding effect - ",
               pcg_report$settings$sample_id)),
      varstats_plots_plotly[['coding']]
    ),
    bslib::card(
      full_screen = TRUE,
      height = "350px",
      bslib::card_header(
        class = "bg-dark", 
        paste0("Variant statistics | type - ",
               pcg_report$settings$sample_id)),
      varstats_plots_plotly[['type']]
    )
  ),
  bslib::card(
    full_screen = TRUE,
    height = "400px",
    bslib::card_header(
      class = "bg-dark", 
      paste0("Variant statistics | consequence type - ",
             pcg_report$settings$sample_id)),
    varstats_plots_plotly[['consequence']]
  )
)


```

```{r prep_plots}
#| echo: false

### VAF plot
vaf_dist_tumor <- pcgrr::af_distribution(
  var_df = pcg_report$content$snv_indel$callset$variant)

vaf_dist_tumor$VARIANT_CLASS <- factor(
  vaf_dist_tumor$VARIANT_CLASS, 
  levels = c("SNV","deletion","insertion","indel","substitution"))

vaf_plot <- ggplot2::ggplot(data = vaf_dist_tumor) + 
  ggplot2::geom_bar(
    mapping = ggplot2::aes(
      x = bin_start, 
      y = Count, 
      fill = VARIANT_CLASS), 
    stat = "identity") + 
  ggplot2::theme_classic() +
  ggplot2::ylab("Number of variants") +
  ggplot2::xlab("Variant allelic fraction - tumor") +
  ggplot2::scale_fill_manual(values = pcgrr::color_palette$tier$values) +  
  ggplot2::theme(legend.title = ggplot2::element_blank(),
                 legend.position = "bottom",
                 #legend.position = "",
                 #axis.text.x = element_blank(),
                 axis.text.x = ggplot2::element_text(
                   family = "Helvetica", size = 12, vjust = -0.1),
                 axis.title.x = ggplot2::element_text(
                   family = "Helvetica", size = 12, vjust = -2),
                 axis.text.y = ggplot2::element_text(
                   family = "Helvetica", size = 12),
                 axis.title.y = ggplot2::element_text(
                   family = "Helvetica", size = 12, vjust = 1.5),
                 plot.margin = (grid::unit(c(0.5, 0.5, 0.5, 0.5), "cm")),
                 legend.text = ggplot2::element_text(
                   family = "Helvetica", size = 12))

vaf_plot_plotly <- plotly::ggplotly(vaf_plot)
vaf_plot_plotly$x$layout$legend$title$text <- ""

```

<br>

```{r}
bslib::card(
  height = "330px",
  bslib::card_header(
    class = "bg-dark",
    paste0(
      "Distribution - variant allelic fraction - ",
      pcg_report$settings$sample_id)
  ),
  vaf_plot_plotly
)

```


```{r prepare_genomic_distribution_plot}
#| eval: !expr pcg_report$content$rainfall$eval == TRUE  & NROW(pcg_report$content$rainfall$rfdata$data) > 0
#| echo: false

## retrieve rainfall data
rfdat <- pcg_report$content$rainfall$rfdata

## set size of text and points in plot
cex <- 0.8
cex_text <- 3

# make rainfall plot with rfdat

type_stats <- plyr::count(rfdat$data$type) |>
  dplyr::arrange(desc(freq))

rfdat$data$type <- factor(
  rfdat$data$type, levels = type_stats$x)

genomic_dist_plot <- ggplot2::ggplot(
  rfdat$data, ggplot2::aes(x = location, y = distance)) +
    ggplot2::geom_point(
      ggplot2::aes(colour = type), cex = rfdat$cex) +
    ggplot2::geom_vline(
      xintercept = as.vector(rfdat$chr_cum), linetype="dotted") +
    ggplot2::annotate("text", x = rfdat$intercept, 
                      y = rfdat$ylim, 
                      label = rfdat$labels, 
                      cex = rfdat$cex_text) +
    ggplot2::xlab("Genomic Location") +
    ggplot2::ylab("Genomic Distance") +
    ggplot2::scale_y_log10() +
    ggplot2::scale_colour_manual(values = rfdat$colors) +
    ggplot2::scale_x_continuous(
      expand = c(0,0), limits=c(0, max(rfdat$chr_cum))) +
    ggplot2::theme_bw() +
    ggplot2::theme(
      legend.position = "bottom",
      legend.title = ggplot2::element_blank(),
      legend.key = ggplot2::element_blank(),
      panel.grid.minor.x = ggplot2::element_blank(),
      panel.grid.major.x = ggplot2::element_blank(),
      axis.ticks.x = ggplot2::element_blank(),
      axis.text.x = ggplot2::element_blank()) +
    ggplot2::guides(colour = ggplot2::guide_legend(nrow = 1))

genomic_dist_plot_plotly <- plotly::ggplotly(genomic_dist_plot)
genomic_dist_plot_plotly$x$layout$legend$title$text <- ""

```


```{r}
bslib::card(
  height = "300px",
  bslib::card_header(
    class = "bg-dark",
    paste0(
      "Distribution - genomic location - ",
      pcg_report$settings$sample_id)
  ),
  genomic_dist_plot_plotly
)

```

<br>
<hr>
<br>

### Variant classification - oncogenicity

Annotations for all short variants detected in the tumor sample can here be interrogated, e.g. with respect to gene, variant consequence, variant allelic fraction/sequencing depth (if provided as input), and also with respect to _predicted oncogenicity_. For the latter, PCGR implements recently published oncogenicity criteria/guidelines developed by ClinGen/VICC [@Horak2022-uh]. The tabset below provides an overview of coding (protein-altering) versus non-coding variants found in the tumor sample.

::: {.callout-note}

## Note - output limitations

In order to maintain responsiveness of client-side data interaction, only the top __N = 1,000__ variants are shown in the tables below (coding and non-coding variants). For a complete list of variants, please refer to the Excel workbook that is generated by PCGR.

:::

<br>

::: {.panel-tabset}

#### Coding variants

```{r }
#| output: asis
#| eval: !expr pcg_report$content$snv_indel$vstats$n_coding != 0

coding_variant_set <- 
  pcg_report$content$snv_indel$callset$variant_display |>
  dplyr::filter(.data$CODING_STATUS == "coding") |>
  dplyr::select(
    dplyr::any_of(
      pcgrr::dt_display$snv_indel_tier3
    )
  ) |>
 dplyr::arrange(
    dplyr::desc(.data$ONCOGENICITY_SCORE),
    dplyr::desc(.data$TISSUE_ASSOC_RANK),
    dplyr::desc(.data$GLOBAL_ASSOC_RANK),
  ) |>
  head(1000)

coding_variants_shared <- 
  crosstalk::SharedData$new(coding_variant_set)


filter_set1 <- list()
filter_set2 <- list()

filter_set1[[1]] <- crosstalk::filter_select(
  "SYMBOL", "Gene", coding_variants_shared, ~SYMBOL)
filter_set1[[2]] <- crosstalk::filter_select(
  "ONCOGENICITY", "Oncogenicity", coding_variants_shared, ~ONCOGENICITY)
filter_set2[[1]] <- crosstalk::filter_select(
  "CONSEQUENCE", "Consequence", coding_variants_shared, ~CONSEQUENCE)
filter_set2[[2]] <- crosstalk::filter_select(
  "MUTATION_HOTSPOT", "Mutation hotspot", coding_variants_shared, ~MUTATION_HOTSPOT)

i_set1 <- 3
i_set2 <- 3
if(any(!is.na(coding_variant_set$CALL_CONFIDENCE))){
  filter_set2[[i_set2]] <- crosstalk::filter_select(
    "CALL_CONFIDENCE", 
    "Call confidence", 
    coding_variants_shared, 
    ~CALL_CONFIDENCE)
  i_set2 <- i_set2 + 1
}

if(any(!is.na(coding_variant_set$DP_TUMOR)) & 
   any(!is.na(coding_variant_set$VAF_TUMOR))){
  filter_set1[[i_set1]] <- crosstalk::filter_slider(
    "DP_TUMOR", "Sequencing depth tumor", 
    coding_variants_shared, ~DP_TUMOR, ticks = F, sep = F)
  filter_set2[[i_set2]] <- crosstalk::filter_slider(
    "VAF_TUMOR", "Allelic fraction tumor", 
    coding_variants_shared, ~VAF_TUMOR, 
    sep = F, min = 0, max = 1, step = 0.05, ticks = T)
  i_set1 <- i_set1 + 1
  i_set2 <- i_set2 + 1
}

if(any(!is.na(coding_variant_set$DP_CONTROL)) & 
   any(!is.na(coding_variant_set$VAF_CONTROL))){
  filter_set1[[i_set1]] <- crosstalk::filter_slider(
    "DP_CONTROL", "Sequencing depth control", 
    coding_variants_shared, ~DP_CONTROL, ticks = F, sep = F)
  filter_set2[[i_set2]] <- crosstalk::filter_slider(
    "VAF_CONTROL", "Allelic fraction control", 
    coding_variants_shared, ~AF_CONTROL, 
    sep = F, min = 0, max = 1, step = 0.05, ticks = T)
}

crosstalk::bscols(
  filter_set1,
  filter_set2
)

DT::datatable(
  coding_variants_shared,
  escape = F, 
  extensions = c("Buttons","Responsive"), 
  options = list(
    buttons = c('csv','excel'), 
    dom = 'Bfrtip')) |>
  DT::formatStyle(
    color = "white",
    "ONCOGENICITY",
    "ONCOGENICITY",
    backgroundColor = 
      DT::styleEqual(
        pcgrr::color_palette$oncogenicity$levels,
        pcgrr::color_palette$oncogenicity$values
      )
  ) |>
  DT::formatStyle(
    "SYMBOL",
    "TISSUE_ASSOC_RANK", 
    color = "white", 
    backgroundColor = 
      DT::styleInterval(
        pcgrr::color_palette$cancer_assoc$breaks,
        pcgrr::color_palette$cancer_assoc$values
      )
  )


```


#### Non-coding variants

```{r }
#| output: asis
#| eval: !expr pcg_report$content$snv_indel$vstats$n_noncoding > 0

noncoding_variant_set <- 
  pcg_report$content$snv_indel$callset$variant_display |>
  dplyr::filter(.data$CODING_STATUS == "noncoding") |>
  dplyr::select(
    dplyr::any_of(
      pcgrr::dt_display$snv_indel_tier3
    )
  ) |>
 dplyr::arrange(
    dplyr::desc(.data$ONCOGENICITY_SCORE),
    dplyr::desc(.data$TISSUE_ASSOC_RANK),
    dplyr::desc(.data$GLOBAL_ASSOC_RANK),
  ) |>
  head(1000)


noncoding_variants_shared <- 
  crosstalk::SharedData$new(noncoding_variant_set)


filter_set1 <- list()
filter_set2 <- list()

filter_set1[[1]] <- crosstalk::filter_select(
  "SYMBOL", "Gene", noncoding_variants_shared, ~SYMBOL)
filter_set2[[1]] <- crosstalk::filter_select(
  "CONSEQUENCE", "Consequence", noncoding_variants_shared, ~CONSEQUENCE)

i_set1 <- 2
i_set2 <- 2
if(any(!is.na(noncoding_variant_set$CALL_CONFIDENCE))){
  filter_set2[[i_set2]] <- crosstalk::filter_select(
    "CALL_CONFIDENCE", 
    "Call confidence", noncoding_variants_shared, ~CALL_CONFIDENCE)
  i_set2 <- i_set2 + 1
}

if(any(!is.na(coding_variant_set$DP_TUMOR)) & 
   any(!is.na(coding_variant_set$VAF_TUMOR))){
  filter_set1[[i_set1]] <- crosstalk::filter_slider(
    "DP_TUMOR", "Sequencing depth tumor", 
    noncoding_variants_shared, ~DP_TUMOR, ticks = F, sep = F)
  filter_set2[[i_set2]] <- crosstalk::filter_slider(
    "VAF_TUMOR", "Allelic fraction tumor", 
    noncoding_variants_shared, ~VAF_TUMOR, 
    sep = F, min = 0, max = 1, step = 0.05, ticks = T)
  i_set1 <- i_set1 + 1
  i_set2 <- i_set2 + 1
}

if(any(!is.na(coding_variant_set$DP_CONTROL)) & 
   any(!is.na(coding_variant_set$VAF_CONTROL))){
  filter_set1[[i_set1]] <- crosstalk::filter_slider(
    "DP_CONTROL", "Sequencing depth control", 
    noncoding_variants_shared, ~DP_CONTROL, ticks = F, sep = F)
  filter_set2[[i_set2]] <- crosstalk::filter_slider(
    "VAF_CONTROL", "Allelic fraction control", 
    noncoding_variants_shared, ~AF_CONTROL, 
    sep = F, min = 0, max = 1, step = 0.05, ticks = T)
}

crosstalk::bscols(
  filter_set1,
  filter_set2
)

DT::datatable(
  noncoding_variants_shared,
  escape = F, 
  extensions = c("Buttons","Responsive"), 
  options = list(
    buttons = c('csv','excel'), 
    dom = 'Bfrtip')) |>
  DT::formatStyle(
    color = "white",
    "ONCOGENICITY",
    "ONCOGENICITY",
    backgroundColor = 
      DT::styleEqual(
        pcgrr::color_palette$oncogenicity$levels,
        pcgrr::color_palette$oncogenicity$values
      )
  ) |>
  DT::formatStyle(
    "SYMBOL",
    "TISSUE_ASSOC_RANK", 
    color = "white", 
    backgroundColor = 
      DT::styleInterval(
        pcgrr::color_palette$cancer_assoc$breaks,
        pcgrr::color_palette$cancer_assoc$values
      )
  )


```

:::

<br>

### Variant classification - actionability

Acquired SNVs and InDels in the tumor sample have been assessed for
_clinical actionability_ through an implementation of ACMG/AMP guidelines [@Li2017-ew]. We use CIViC [@Griffith2017-do] and CGI [@Tamborero2018-aj] as the underlying sources for actionable variants (versions indicated below). 

The tabset below indicates which variants have been classified into three distinct _tiers of clinical significance_ according to ACMG/AMP criteria.

::: {.callout-note}
## Note - biomarker matching

The same somatic mutation may frequently match with multiple evidence items from , pending on e.g. the _disease context_, _therapeutic context_, _biomarker resolution_, or underlying _evidence source_ (i.e. publication)
:::

```{r}
#| echo: false
#| output: asis
#| include: !expr pcg_report$content$snv_indel$vstats$n_actionable_tier1 != 0 | pcg_report$content$snv_indel$vstats$n_actionable_tier2 != 0 | pcg_report$content$snv_indel$vstats$n_actionable_tier3 != 0

cat("\n::: {.callout-note}\n## Note - biomarker resolution\n\n Biomarkers registered in CIViC/CGI are provided at different _resolutions_ (i.e. filter <b>Biomarker resolution</b>). The accuracy of a match between a variant in the sample and a clinical evidence item (biomarker) will vary accordingly (highlighted by sample alterations with different color backgrounds):\n\n")

cat('<ul><li>Biomarker match at the <mark style="background-color:#2c313c; font-weight:bold; color:white">&nbsp; genomic position/amino acid/codon level &nbsp;</mark></li>')
cat(paste0(
  '<br><li>Biomarker match at the <mark style="background-color:', 
  pcgrr::color_palette$warning,
  '; color:white; font-weight:bold">&nbsp; exon/gene level&nbsp; </mark></li></ul>\n\n:::'))
htmltools::br()

```

::: {.panel-tabset .nav-pills}

#### <b>TIER I</b> - strong clinical significance

<br>

```{r}
#| echo: false
#| output: asis
#| eval: !expr pcg_report$content$snv_indel$vstats$n_actionable_tier1 != 0

dt_snv_content_tier1 <- 
  pcgrr:::get_dt_tables(
    report = pcg_report, tier = 1, variant_class = "snv_indel")

DT::datatable(
  dt_snv_content_tier1[['by_gene']],
  escape = F, 
  options = list(dom = 't'),
  extensions = c("Responsive")) |>
  DT::formatStyle(
    color="white", 
    "MOLECULAR_ALTERATION", 
    "BM_TOP_RESOLUTION", 
    fontWeight = 'bold', 
    `text-align` = 'center',
    backgroundColor = DT::styleEqual(
      c('high','low'), 
      c(pcgrr::color_palette$bg_dark,
        pcgrr::color_palette[['warning']])
      )
  ) |>
  DT::formatStyle(
    'BIOMARKER_EVIDENCE',
    'BM_TOP_RESOLUTION',
    color = "white",
     backgroundColor = DT::styleEqual(
      c('high','low'), 
      c(pcgrr::color_palette$bg_dark,
        pcgrr::color_palette[['warning']])
      )
  ) 

htmltools::br()
htmltools::hr()
htmltools::br()

cat(paste0(
  "<font style='font-size: 110%'>Details with respect to the clinical",
  " evidence items associated with <b>",
  paste(dt_snv_content_tier1[['by_gene']]$MOLECULAR_ALTERATION, collapse=", "),
  " </b>can be explored in the data table listed below:</font>\n"))
htmltools::br()

snv_eitem_tier1_shared <- crosstalk::SharedData$new(
  dt_snv_content_tier1[['by_eitem']] |>
    dplyr::rename(SAMPLE_ALTERATION = MOLECULAR_ALTERATION))

crosstalk::bscols(
  list(
     crosstalk::filter_select(
      "SAMPLE_ALTERATION", "Sample alteration", 
      snv_eitem_tier1_shared, ~SAMPLE_ALTERATION),
    crosstalk::filter_select(
      "BM_CANCER_TYPE", "Cancer type", 
      snv_eitem_tier1_shared, ~BM_CANCER_TYPE),
    crosstalk::filter_select(
      "BM_CLINICAL_SIGNIFICANCE", "Clinical significance", 
      snv_eitem_tier1_shared, ~BM_CLINICAL_SIGNIFICANCE),
    crosstalk::filter_slider(
      "BM_RATING", "Rating", snv_eitem_tier1_shared, 
      ~BM_RATING, min = 0, max = 5, step = 1, ticks = T),
    crosstalk::filter_select(
      "BM_RESOLUTION", "Biomarker resolution", 
      snv_eitem_tier1_shared, ~BM_RESOLUTION)
  ),
  list(
    crosstalk::filter_select(
      "BM_EVIDENCE_TYPE", "Evidence type", 
      snv_eitem_tier1_shared, ~BM_EVIDENCE_TYPE),
    crosstalk::filter_select(
      "BM_EVIDENCE_LEVEL", "Evidence level", 
      snv_eitem_tier1_shared, ~BM_EVIDENCE_LEVEL),
    crosstalk::filter_select(
      "BM_EVIDENCE_DIRECTION", "Evidence direction", 
      snv_eitem_tier1_shared, ~BM_EVIDENCE_DIRECTION),
    crosstalk::filter_select(
      "BM_THERAPEUTIC_CONTEXT", "Therapeutic context", 
      snv_eitem_tier1_shared, ~BM_THERAPEUTIC_CONTEXT)
  )
)

htmltools::br()

DT::datatable(
  snv_eitem_tier1_shared,
  escape = F, 
  extensions = c("Buttons","Responsive"), 
  options = list(
    buttons = c('csv','excel'), 
    dom = 'Bfrtip')) |>
  DT::formatStyle(
    color = "white",
    'BM_EVIDENCE_LEVEL', 
    backgroundColor = DT::styleEqual(
      pcgrr::color_palette$clinical_evidence$levels,
      pcgrr::color_palette$clinical_evidence$values)) |>
  DT::formatStyle(
    color = "white", 
    c("SAMPLE_ALTERATION","BM_CONTEXT"), 
    "BM_RESOLUTION", 
    fontWeight = 'bold', 
    `text-align` = 'center',
    backgroundColor = DT::styleEqual(
      c('genomic','hgvsp','codon',
        'exon','gene_region_mut',
        'gene_lof','gene_mut'), 
      c(pcgrr::color_palette$bg_dark,
        pcgrr::color_palette$bg_dark,
        pcgrr::color_palette$bg_dark,
        pcgrr::color_palette[['warning']],
        pcgrr::color_palette[['warning']],
        pcgrr::color_palette[['warning']],
        pcgrr::color_palette[['warning']])
    )
  )

```


```{r }
#| output: asis
#| echo: false
#| eval: !expr pcg_report$content$snv_indel$vstats$n_actionable_tier1 == 0

htmltools::br()
cat('\n*  <i> <font style="font-size: 110%"><b>No</b> somatic SNVs/InDels of strong clinical significance were found.</font></i>', sep = '\n')
cat('\n')
htmltools::br()

```

#### <b>TIER II</b>- potential clinical significance


```{r}
#| echo: false
#| output: asis
#| eval: !expr pcg_report$content$snv_indel$vstats$n_actionable_tier2 != 0

dt_snv_content_tier2 <- 
  pcgrr:::get_dt_tables(
    report = pcg_report, 
    tier = 2, 
    variant_class = "snv_indel")

DT::datatable(
  dt_snv_content_tier2[['by_gene']],
  escape = F, 
  options = list(dom = 't'),
  extensions = c("Responsive")) |>
  DT::formatStyle(
    color="white", 
    "MOLECULAR_ALTERATION", 
    "BM_TOP_RESOLUTION", 
    fontWeight = 'bold', 
    `text-align` = 'center',
    backgroundColor = DT::styleEqual(
      c('high','low'), 
      c(pcgrr::color_palette$bg_dark,
        pcgrr::color_palette[['warning']])
      )
  ) |>
  DT::formatStyle(
    'BIOMARKER_EVIDENCE',
    'BM_TOP_RESOLUTION',
    color = "white",
     backgroundColor = DT::styleEqual(
      c('high','low'), 
      c(pcgrr::color_palette$bg_dark,
        pcgrr::color_palette[['warning']])
      )
  ) 

htmltools::br()
htmltools::hr()
htmltools::br()
cat(paste0(
  "<font style='font-size: 110%'>Details with respect to the clinical",
  " evidence items associated with <b>",
  paste(dt_snv_content_tier2[['by_gene']]$MOLECULAR_ALTERATION, collapse=", "),
  " </b>can be explored in the data table listed below:</font>\n"))
htmltools::br()
htmltools::br()

snv_eitem_tier2_shared <- crosstalk::SharedData$new(
  dt_snv_content_tier2[['by_eitem']] |>
    dplyr::rename(SAMPLE_ALTERATION = MOLECULAR_ALTERATION))

crosstalk::bscols(
  list(
     crosstalk::filter_select(
      "SAMPE_ALTERATION", "Sample alteration", 
      snv_eitem_tier2_shared, ~SAMPLE_ALTERATION),
    crosstalk::filter_select(
      "BM_CANCER_TYPE", "Cancer type", 
      snv_eitem_tier2_shared, ~BM_CANCER_TYPE),
    crosstalk::filter_select(
      "BM_CLINICAL_SIGNIFICANCE", "Clinical significance", 
      snv_eitem_tier2_shared, ~BM_CLINICAL_SIGNIFICANCE),
    crosstalk::filter_slider(
      "BM_RATING", "Rating", snv_eitem_tier2_shared, 
      ~BM_RATING, min = 0, max = 5, step = 1, ticks = T),
    crosstalk::filter_select(
      "BM_RESOLUTION", "Biomarker resolution", 
      snv_eitem_tier1_shared, ~BM_RESOLUTION)

  ),
  list(
    crosstalk::filter_select(
      "BM_EVIDENCE_TYPE", "Evidence type", 
      snv_eitem_tier2_shared, ~BM_EVIDENCE_TYPE),
    crosstalk::filter_select(
      "BM_EVIDENCE_LEVEL", "Evidence level", 
      snv_eitem_tier2_shared, ~BM_EVIDENCE_LEVEL),
    crosstalk::filter_select(
      "BM_EVIDENCE_DIRECTION", "Evidence direction", 
      snv_eitem_tier2_shared, ~BM_EVIDENCE_DIRECTION),
    crosstalk::filter_select(
      "BM_THERAPEUTIC_CONTEXT", "Therapeutic context", 
      snv_eitem_tier2_shared, ~BM_THERAPEUTIC_CONTEXT)
  )
)

htmltools::br()

DT::datatable(
  snv_eitem_tier2_shared,
  escape = F, 
  extensions = c("Buttons","Responsive"), 
  options = list(
    buttons = c('csv','excel'), 
    dom = 'Bfrtip')) |>
  DT::formatStyle(
    color = "white",
    'BM_EVIDENCE_LEVEL', 
    backgroundColor = DT::styleEqual(
      pcgrr::color_palette$clinical_evidence$levels,
      pcgrr::color_palette$clinical_evidence$values)) |>
  DT::formatStyle(
    color = "white", 
    c("SAMPLE_ALTERATION",
      "BM_CONTEXT"), 
    "BM_RESOLUTION", 
    fontWeight = 'bold', 
    `text-align` = 'center',
    backgroundColor = DT::styleEqual(
      c('hgvsp','genomic','codon',
        'exon','gene_region_mut',
        'gene_lof','gene_mut'), 
      c(pcgrr::color_palette$bg_dark,
        pcgrr::color_palette$bg_dark,
        pcgrr::color_palette$bg_dark,
        pcgrr::color_palette[['warning']],
        pcgrr::color_palette[['warning']],
        pcgrr::color_palette[['warning']],
        pcgrr::color_palette[['warning']])
    )
  )

```


```{r }
#| output: asis
#| echo: false
#| eval: !expr pcg_report$content$snv_indel$vstats$n_actionable_tier2 == 0

htmltools::br()
cat('\n*  <i> <font style="font-size: 110%"><b>No</b> somatic SNVs/InDels of potential clinical significance were found.</font></i>', sep = '\n')
cat('\n')
htmltools::br()

```

#### <b>TIER III</b> - uncertain clinical significance

Here, we list protein-altering somatic variants located in proto-oncogenes and tumor suppressors that are currently _not_ linked to any clinical evidence items (as specified in [@Li2017-ew]). These variants are considered to have uncertain clinical significance and are thus not recommended for clinical action.

Variants have been ranked based on their oncogenicity score, and their strength of association to cancer at the gene level (here, specifically __`r pcg_report$settings$conf$sample_properties$site`__ cancers), from <span style="background-color:`r pcgrr::color_palette$cancer_assoc$values[1]`; padding:2x; color:white"><b>&nbsp; weak associations &nbsp; </b></span>&nbsp; to <span style="background-color:`r pcgrr::color_palette$cancer_assoc$values[length(pcgrr::color_palette$cancer_assoc$values)]`; padding:2x; color:white"><b>&nbsp; strong associations &nbsp; </b></span> [@Nakken2023-ol]. 
<br>

```{r }
#| output: asis
#| echo: false
#| eval: !expr pcg_report$content$snv_indel$vstats$n_actionable_tier3 != 0

tier3_variants <- 
  pcg_report$content[['snv_indel']]$callset$variant_display |>
  dplyr::filter(.data$TIER == 3) |>
  dplyr::select(
    dplyr::any_of(
      pcgrr::dt_display$snv_indel_tier3
    )
  ) |>
  dplyr::arrange(
    dplyr::desc(.data$ONCOGENICITY_SCORE),
    dplyr::desc(.data$TISSUE_ASSOC_RANK),
    dplyr::desc(.data$GLOBAL_ASSOC_RANK),
  )


DT::datatable(
  tier3_variants,
  escape = F, 
  extensions = c("Buttons","Responsive"), 
  options = list(
    buttons = c('csv','excel'), 
    dom = 'Bfrtip')) |>
   DT::formatStyle(
     "SYMBOL",
     "TISSUE_ASSOC_RANK", 
     color = "white", 
     backgroundColor = 
       DT::styleInterval(
         pcgrr::color_palette$cancer_assoc$breaks,
         pcgrr::color_palette$cancer_assoc$values
       )
   )


```

:::
