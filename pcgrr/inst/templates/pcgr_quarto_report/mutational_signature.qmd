## Mutational signatures


```{r setup1}
#| echo: false

pcg_report <- readRDS(file="../../../tmp.rds")
report_color <- pcgrr::color_palette$report_color$values[2]
```

Here, we apply the **MutationalPatterns** package [@Blokzijl2018-nc] to estimate the relative contribution of [known mutational signatures](https://cancer.sanger.ac.uk/signatures/) in **`r pcg_report$settings$sample_id`**. Specifically, the package finds the optimal linear combination (and weights) of reference mutational signatures that most closely reconstructs the spectrum of single base substitutions (SBS) seen in the tumor. This procedure is frequently referred to as *signature refitting*. We employ a bootstrapping approach to estimate the uncertainty in the signature weights.

```{r setup_signature_display}
#| echo: false

#pcg_report <- readRDS(file="tmp.rds")

msig_content <- 
  pcg_report$content$mutational_signatures

missing_data_no_refit <- F
if(msig_content$eval == F | 
   msig_content$missing_data == T){
  missing_data_no_refit <- T
}
conf <- pcg_report$settings$conf
msig_conf <- conf$somatic_snv$mutational_signatures

```

```{r missing_data_callout}
#| output: asis
#| eval: !expr missing_data_no_refit == TRUE

cat("\n::: {.callout-warning}\n## Limited variant data - ",
    "refitting analysis omitted\n\nThere are too few",
    " variants <b>(N = ",
    NROW(pcg_report$content$mutational_signatures$variant_set$all),
    ")</b> in the tumor sample for reliable re-fitting",
    " of mutational signatures\n\n:::\n\n", sep="")

```

```{r t1}
#| output: asis
#| eval: !expr missing_data_no_refit == FALSE  & as.logical(msig_conf$all_reference_signatures) == FALSE

cat('For <b>', conf$sample_properties$site,'</b> cancers, mutational signature identification uses the following reference collection of known signatures for the <i>refitting procedure</i> (i.e. previously attributed to the same type of cancer): <br>',sep="")

dat <- msig_content$result$reference_data
if("SIGNATURE_ID" %in% colnames(dat) & 
   "AETIOLOGY_KEYWORD" %in% colnames(dat)){
  
  i <- 1
  
  refsig_collection_site <- 
    msig_content$result$reference_data |>
    dplyr::mutate(tmp_id = as.numeric(
      stringr::str_replace(
        stringr::str_replace(
          stringr::str_replace(
            stringr::str_replace(
              stringr::str_replace(SIGNATURE_ID,"SBS",""),
              "a",".2"),
            "b",".4"),
          "d", ".6"),
        "c", ".8"))) |>
    dplyr::arrange(tmp_id) |>
    dplyr::select(SIGNATURE_ID, AETIOLOGY_KEYWORD) |>
    dplyr::distinct()
  
  half_collection <- ceiling(nrow(refsig_collection_site) / 2)
  
  cat('\n\n')
  cat(':::: {.columns}')
  cat('\n\n')
  cat('::: {.column width=\"35%\"}\n\n')
  
  cat('<ul>')
  while(i <= half_collection){
    cat(paste0("<li><b>",
               refsig_collection_site[i,]$SIGNATURE_ID, "</b> - ", 
               refsig_collection_site[i,]$AETIOLOGY_KEYWORD),'</li>\n')
    i <- i + 1
  }
  cat('</ul>\n\n')
  cat(':::\n\n')
  cat('::: {.column width="5%"}\n<!-- space -->\n')
  cat(':::\n\n')

  cat('::: {.column width="35%"}\n\n')
  cat('<ul>')
  while(i <= NROW(refsig_collection_site)){
    cat(paste0("<li><b>",
               refsig_collection_site[i,]$SIGNATURE_ID, "</b> - ", 
               refsig_collection_site[i,]$AETIOLOGY_KEYWORD),'</li>\n')
    i <- i + 1
  }
  cat('\n</ul>\n\n')
  cat(':::\n\n')
  cat('::::\n')
}

```

```{r t3}
#| output: asis 
#| eval: !expr missing_data_no_refit == FALSE & as.logical(msig_conf$all_reference_signatures) == TRUE
cat("For this analysis, '--all_reference_signatures' have been turned on, which means that all reference signatures (n = 67) have been considered during refitting of the mutational profile with reference signatures",sep="\n")
htmltools::br()

```

```{r t4}
#| output: asis
#| eval: !expr missing_data_no_refit == FALSE

cat('A total of <b>n = ',
    nrow(pcg_report[['content']][['mutational_signatures']][['variant_set']]$all), 
    '</b> SNVs were used for the mutational signature analysis of this tumor.', sep = '')

cat("<br><br>")

```

```{r signature_contribution_plot}
#| eval: !expr missing_data_no_refit == FALSE
#| output: asis


plot_data <- 
  msig_content$result$contributions$per_signature |>
  dplyr::mutate(signature_aetiology = paste0(signature_id, " - ", group)) |>
  dplyr::mutate(prop_signature = round(prop_signature, digits = 4)) |>
  dplyr::mutate(prop_signature_ci_lower = round(
    prop_signature_ci_lower, digits = 4)) |>
  dplyr::mutate(prop_signature_ci_upper = round(
    prop_signature_ci_upper, digits = 4)) |>
  dplyr::mutate(
    signature_aetiology = factor(
      signature_aetiology, levels = signature_aetiology))

signature_contribution_plot <- ggplot2::ggplot(
  head(plot_data, 6), 
  ggplot2::aes(
    x = reorder(signature_aetiology, -prop_signature), 
    y = prop_signature, 
    fill = signature_aetiology)) +
    ggplot2::geom_bar(stat = "identity") + 
  ggplot2::geom_errorbar(
    ggplot2::aes(ymin = prop_signature_ci_lower, 
                 ymax = prop_signature_ci_upper), 
    width = .3)+
    ggplot2::scale_fill_manual(
      values = head(pcgrr::color_palette$tier$values, NROW(plot_data))) +
    ggplot2::theme_classic() +
    ggplot2::xlab("") +
    ggplot2::ylab("Relative contribution") +
  ggplot2::theme(
    legend.position = "bottom",
    legend.title = ggplot2::element_blank(),
    plot.margin = ggplot2::margin(0.5, 0.5, 0.5, 0.5, "cm"), 
    axis.text.x = ggplot2::element_blank(),
    axis.title.y = ggplot2::element_text(family = "Helvetica", size = 13),
    axis.text.y = ggplot2::element_text(family = "Helvetica", size = 13),
    legend.text = ggplot2::element_text(family = "Helvetica", size = 12))


pltly_plot <- plotly::ggplotly(signature_contribution_plot)
pltly_plot$x$layout$legend$title$text <- ""
bslib::card(
  height = "400px",
  bslib::card_header(
    class = "bg-dark",
    paste0(
      "Key signatures identified - ",
      pcg_report$settings$sample_id)
  ),
  bslib::card_body(
    pltly_plot
  )
)
```

```{r main_signature_findings}
#| output: asis
#| echo: false
#| eval: !expr missing_data_no_refit == FALSE

t <- list(
  family = "Helvetica",
  size = 15)

 m <- list(
    l = 50,
    r = 50,
    b = 80,
    t = 80,
    pad = 10
  )

pie_aetiologies <- plotly::plot_ly(
  msig_content$result$contributions$per_group, 
  #margin = m,
  marker = list(
    colors = pcgrr::color_palette$tier$values,
    line = list(color = '#FFFFFF', width = 3))) |>
  plotly::add_pie(
    msig_content$result$contributions$per_group, 
    labels =~ factor(group),
    values = ~prop_group,
    textinfo = "percent",
    type = 'pie') |>
  plotly::layout(legend = list(orientation = "h", font = t)) 

bslib::page_fillable(
  bslib::layout_columns(
    col_widths = c(4,8),
    height = "380px",
      bslib::layout_column_wrap(
        width = "300px",
        bslib::value_box(
          title = "Dominant aetiologies",
          value = paste(
            head(
              msig_content$result$contributions$per_group$group, 2),
            collapse = ", "),
          showcase = NULL,
          theme = "dark"
        ),
        bslib::value_box(
          title = "Goodness of signature fit",
          value = paste0(
            round(
              msig_content$result$goodness_of_fit$estimate,
              digits = 3) * 100,
            "%"),
          showcase = NULL,
          theme = ifelse(
            msig_content$result$goodness_of_fit$estimate > 0.9,
            "dark",
            "danger"
            # bslib::value_box_theme(
            #   bg = pcgrr::color_palette$warning,
            #   fg = "#fff")
          )
      )
    ),
    bslib::card(
      height = "340px",
      bslib::card_header(
        class = "bg-dark", 
        paste0("Key underlying aetiologies - ",
               pcg_report$settings$sample_id)),
    pie_aetiologies
    )
  )
)
```

```{r signature_contribution_table}
#| eval: !expr missing_data_no_refit == FALSE
#| output: asis

signature_ids <- 
  msig_content$result$contributions$per_signature$signature_id
signature_colors <- 
  msig_content$result$contributions$per_signature$col

myOptions <- list(
  buttons = c('csv','excel'),
  dom = 'Bfrtip', 
  scrollCollapse = T)

dat <- dplyr::select(
  msig_content$result$contributions$per_signature, 
  -c(sample_id,col,prop_signature, n_bs_iterations)) |>
  dplyr::mutate(contribution_CI = paste0(
    round(prop_signature_ci_lower, 4) * 100," - ",
    round(prop_signature_ci_upper, 4) * 100, "%")) |>
  dplyr::select(-c("prop_signature_ci_lower", 
                   "prop_signature_ci_upper")) |>
  dplyr::select(
    c("signature_id", "contribution", 
      "contribution_CI", "group"),
    dplyr::everything())

bslib::card(
  height = "600px",
  bslib::card_header(
    class = "bg-dark",
    paste0(
      "All signatures identified - ",
      pcg_report$settings$sample_id)
  ),
  bslib::card_body(
    DT::datatable(
      dat,
      extensions = "Responsive",
      options = list(
        pageLength = 6,
        dom = 'tp'),
      escape = F) |>
      DT::formatStyle(
        'contribution',fontWeight = 'bold') |>
      DT::formatStyle(
        'signature_id',color = 'white', 
        backgroundColor = DT::styleEqual(
          signature_ids, signature_colors), 
        fontWeight = 'bold', 
        `text-align` = 'center')
  )
)
```

<br>

### Raw mutational spectrum

As a background perspective, we here provide various views of the raw mutational spectrum for the sample, i.e. not considering a signature re-fitting analysis.

::: panel-tabset
#### SBS - mutational contexts

```{r raw_context_plot}
#| output: asis
#| eval: !expr is.null(msig_content$result$mut_mat) == FALSE

catalogue_mat <- 
  msig_content$result$mut_mat

y_max <- 
  plyr::round_any(
    max(catalogue_mat[,1] / sum(catalogue_mat[,1])),
    0.05, f = ceiling)

# raw_context_plot <- sigminer::show_catalogue(
#   catalogue_mat, 
#   mode = "SBS", 
#   normalize = "row", 
#   x_lab = "", 
#   palette = head(pcgrr::color_palette$tier$values, 6),  
#   y_lab = "Relative contribution",
#   rm_panel_border = T, 
#   bar_width = 0.8, 
#   x_label_angle = 45, 
#   base_size = 18, 
#   paint_axis_text = T)
# 
# raw_context_plot

plotly::ggplotly(
  height = 400,
  MutationalPatterns::plot_96_profile(
    catalogue_mat,
    colors = head(pcgrr::color_palette$tier$values, 6),
    ymax = y_max)
)

```

#### SBS - type occurrences

```{r sbs_type_occurrences}
#| eval: !expr is.null(msig_content$result$type_occurrences) == FALSE & as.logical(rowSums(msig_content$result$type_occurrences[1:6]) > 0) == TRUE
#| output: asis


plotly::ggplotly(
  height = 400,
  MutationalPatterns::plot_spectrum(
    msig_content$result$type_occurrences, 
    CT = TRUE,
    error_bars = 'none',
    colors = head(
      pcgrr::color_palette$tier$values, 7))
)

```

```{r sbs_types_missing}
#| eval: !expr is.null(msig_content$result$type_occurrences) == FALSE &as.logical(rowSums(msig_content$result$type_occurrences[1:6]) > 0) == FALSE 
#| output: asis

cat("\n::: {.callout-note}\n## No SNVs\n\nNo SNVs/single base substitutions", 
    "were found in this sample\n\n:::\n\n")

```

#### ID - mutational contexts

```{r indel_contexts}
#| eval: !expr is.null(msig_content$result$indel_counts) == FALSE
#| column: body-outset
#| output: asis

plotly::ggplotly(
  height = 400,
  width = 1000,
  MutationalPatterns::plot_indel_contexts(
    msig_content$result$indel_counts)
)

```

<br><br>

```{r indel_contexts_missing}
#| eval: !expr is.null(msig_content$result$indel_counts) == TRUE
#| output: asis

cat("\n::: {.callout-note}\n## No InDels\n\nNo insertion/deletions",
"were found in this sample\n\n:::\n\n")

```

:::

<br>

#### Signature similarity

Here, we perform a comparison of the sample's raw mutational spectrum to the COSMIC known signatures (SBS), for samples with at least 30 SNVs. The cosine similarity is calculated between mutational spectrum of the sample (i.e. frequency of three-mer contexts) and all of the COSMIC signatures. The cosine similarity (*SIMILARITY* column below) ranges from 0 to 1, where 1 indicates a perfect match.

```{r highlight_signatures}
#| echo: false
#| eval: !expr as.logical(pcg_report$settings$conf$somatic_snv$mutational_signatures$all_reference_signatures) == FALSE
#| output: asis

cat('\n::: {.callout-note}\n## Site-specific signatures\n\n',
    'Signatures that are previously attributed to ',
    conf$sample_properties$site,
    ' cancers (prevalence >= ', 
    as.character(msig_conf$prevalence_reference_signatures),
    '%) are highlighted.\n\n:::\n\n', sep='')
```

<br>

```{r signature_similarity}
#| eval: !expr is.null(msig_content$result$signature_similarity) == FALSE
#| output: asis

similarity_table <- 
  DT::datatable(
    msig_content$result$signature_similarity,
    extensions = "Responsive",
    options = list(
      pageLength = 13,
      dom = 'tp'),
    escape = F) |>
  DT::formatStyle(
    'SIMILARITY',
    fontWeight = 'bold') |>
  DT::formatStyle(
    c('SIGNATURE_ID','AETIOLOGY_KEYWORD'),
    'SITE_SPECIFIC',
    fontWeight = 'bold',
    color = "white",
    backgroundColor = DT::styleEqual(
      c('YES','NO'), 
      c(report_color,
        pcgrr::color_palette$none)
    )
  )

#similarity_table$x$data$SITE_SPECIFIC <- NULL

bslib::card(
  height = "700px",
  bslib::card_header(
    class = "bg-dark",
    paste0(
      "Similarity of ",
      pcg_report$settings$sample_id,
      " to COSMIC signatures (SBS)")
  ),
  bslib::card_body(
    similarity_table
  )
)



```

<br>
